# coding: utf-8

"""
    sundial

    Sundial optimises renewable power generation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdviceRecommendations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supply_to_grid': 'bool',
        'reason': 'str',
        'start_at': 'datetime',
        'end_at': 'datetime'
    }

    attribute_map = {
        'supply_to_grid': 'supplyToGrid',
        'reason': 'reason',
        'start_at': 'startAt',
        'end_at': 'endAt'
    }

    def __init__(self, supply_to_grid=None, reason=None, start_at=None, end_at=None):  # noqa: E501
        """AdviceRecommendations - a model defined in Swagger"""  # noqa: E501
        self._supply_to_grid = None
        self._reason = None
        self._start_at = None
        self._end_at = None
        self.discriminator = None
        if supply_to_grid is not None:
            self.supply_to_grid = supply_to_grid
        if reason is not None:
            self.reason = reason
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at

    @property
    def supply_to_grid(self):
        """Gets the supply_to_grid of this AdviceRecommendations.  # noqa: E501

        Should the plant supply to the grid?  # noqa: E501

        :return: The supply_to_grid of this AdviceRecommendations.  # noqa: E501
        :rtype: bool
        """
        return self._supply_to_grid

    @supply_to_grid.setter
    def supply_to_grid(self, supply_to_grid):
        """Sets the supply_to_grid of this AdviceRecommendations.

        Should the plant supply to the grid?  # noqa: E501

        :param supply_to_grid: The supply_to_grid of this AdviceRecommendations.  # noqa: E501
        :type: bool
        """

        self._supply_to_grid = supply_to_grid

    @property
    def reason(self):
        """Gets the reason of this AdviceRecommendations.  # noqa: E501

        Reasoning behind this advice  # noqa: E501

        :return: The reason of this AdviceRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this AdviceRecommendations.

        Reasoning behind this advice  # noqa: E501

        :param reason: The reason of this AdviceRecommendations.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def start_at(self):
        """Gets the start_at of this AdviceRecommendations.  # noqa: E501

        Start of this recommendation period  # noqa: E501

        :return: The start_at of this AdviceRecommendations.  # noqa: E501
        :rtype: datetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this AdviceRecommendations.

        Start of this recommendation period  # noqa: E501

        :param start_at: The start_at of this AdviceRecommendations.  # noqa: E501
        :type: datetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this AdviceRecommendations.  # noqa: E501

        End of this recommendation period  # noqa: E501

        :return: The end_at of this AdviceRecommendations.  # noqa: E501
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this AdviceRecommendations.

        End of this recommendation period  # noqa: E501

        :param end_at: The end_at of this AdviceRecommendations.  # noqa: E501
        :type: datetime
        """

        self._end_at = end_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdviceRecommendations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdviceRecommendations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
